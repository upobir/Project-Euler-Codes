# include <bits/stdc++.h>
# include "../TimeMacro.h"
using namespace std;
typedef long long int ll;

/*
Statement:
 Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

 Triangle	 	T_n=n(n+1)/2	 	1, 3, 6, 10, 15, ...
 Pentagonal	 	P_n=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
 Hexagonal	 	H_n=n(2n−1)	 	1, 6, 15, 28, 45, ...
 It can be verified that T_285 = P_165 = H_143 = 40755.

 Find the next triangle number that is also pentagonal and hexagonal.
*/

ll polygonalNum(ll n, ll sides){
    return (sides - 2) * n * (n-1) / 2 + n;
}

ll invPolygonalNum(ll polygonalNum, ll sides){
    double C = sides - 2;
    double desc = C*C/2.0 - C + 1.0 + 2.0*C*polygonalNum;
    if(desc < 0) return -1;
    ll num = llround((C/2.0-1.0+sqrtl(desc))/C);
    if ((sides-2)*num*(num-1)/2 + num == polygonalNum)
        return num;
    return -1;
}

ll firstTriPentaHexaNumberAfter(ll num){
    int index = invPolygonalNum(num, 6);
    while(true){
        index++;
        ll number = polygonalNum(index, 6);
        if(invPolygonalNum(number, 5) != -1)
            return number;
    }
}

int main(){
    Time(
        cout<<firstTriPentaHexaNumberAfter(40755)<<endl;
    )
    return 0;
}

/*
Notes:
 First of all hexagonals are subset of triangonal, so we can just check all hexagonals, there might be a better way with quadratic 
 diaphantine, but this was easier to code.
 Complexity: O(X)
*/